// Adjusted Function mergingTrees(T1, T2):
Function mergingTrees(T1, T2):
    // Checking if trees are empty */ 
    If T1 is empty: 
        Return T2
    If T2 is empty:
        Return T1

    // Confirming that T1 has the smallest root */ 
    If root(T1) > root(T2):
        Swap T1 with T2

    // Merging T2 and T1 but still maintaining the heap order property using recursive calls */ 
    // Assigning the smallest root as the root of the merged tree */ 
    mergedRoot = root(T1)
    mergedRoot.leftChild = mergingTrees(leftChild(T1), T2)

    // Iteratively adjust the heap order if necessary */ 
    iterativeHeapify(mergedRoot) // Adjusted to use iterative heapify */ 
    Return mergedRoot

// Adjusted Function iterativeHeapify(node): 
Function iterativeHeapify(node):
    While node is not null:
        smallest = node
        If node.leftChild is present and node.leftChild < smallest: 
            smallest = node.leftChild
        If node.rightChild is present and node.rightChild < smallest: 
            smallest = node.rightChild

        If smallest != node: 
            Swap node with smallest
            node = smallest // Continue adjusting at the subtree of the smallest */ 
        Else:
            Break // Heap order is maintained, exit the loop */ 
